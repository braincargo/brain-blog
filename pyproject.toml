[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-blog-service"
version = "1.0.0"
description = "AI-powered blog generation service with SMS integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Brain Blog Service Contributors"},
]
keywords = ["ai", "blog", "generation", "openai", "sms", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications",
]

dependencies = [
    "flask>=3.0.0,<4.0.0",
    "requests>=2.32.0,<3.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "boto3>=1.34.0,<2.0.0",
    "openai>=1.90.0,<2.0.0",
    "gunicorn>=22.0.0,<23.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "PyYAML>=6.0.0,<7.0.0",
    "anthropic>=0.50.0,<1.0.0",
    "requests-aws4auth>=1.3.0,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.8.0",
    "types-requests>=2.32.0",
    "types-PyYAML>=6.0.12",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "pre-commit>=3.6.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/ai-blog-service"
Documentation = "https://github.com/your-username/ai-blog-service#readme"
Repository = "https://github.com/your-username/ai-blog-service"
"Bug Tracker" = "https://github.com/your-username/ai-blog-service/issues"

[project.scripts]
ai-blog-service = "app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pipeline*", "providers*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.txt", "*.md"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pipeline", "providers"]

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]

# Coverage Configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/venv/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 