events {
    worker_connections 1024;
}

http {
    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=generate:10m rate=2r/m;
    
    # Kubernetes Network Access Control
    # Define allowed IP ranges for internal cluster access
    geo $internal_access {
        default 0;
        
        # Kubernetes Pod CIDR ranges (common defaults)
        10.0.0.0/8 1;          # Standard pod network
        172.16.0.0/12 1;       # Alternative pod network
        192.168.0.0/16 1;      # Local/development networks
        
        # Kubernetes Service CIDR ranges (common defaults)
        10.96.0.0/12 1;        # Default service network
        10.32.0.0/12 1;        # GKE service network
        172.20.0.0/16 1;       # EKS service network
        
        # Add your specific cluster CIDR ranges here:
        # 10.244.0.0/16 1;     # Example: Your cluster pod CIDR
        # 10.100.0.0/16 1;     # Example: Your cluster service CIDR
    }
    
    # Twilio IP Ranges for webhook access
    geo $twilio_access {
        default 0;
        
        # Twilio IP ranges (as of 2024 - verify with Twilio documentation)
        54.172.60.0/23 1;      # US East
        54.244.51.0/24 1;      # US West
        177.71.206.192/26 1;   # South America
        54.252.254.64/26 1;    # Asia Pacific
        54.171.127.192/26 1;   # Europe
        
        # Add additional Twilio IPs as needed
        # Check: https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides
    }
    
    # Hide Nginx version
    server_tokens off;
    
    # Basic DoS protection
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 5s 5s;
    send_timeout 10s;
    client_max_body_size 16M;
    
    # Log format for security monitoring
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time';
    
    access_log /var/log/nginx/access.log security;
    error_log /var/log/nginx/error.log warn;
    
    upstream backend {
        server braincargo-blog-service:8080 max_fails=3 fail_timeout=30s;
    }
    
    server {
        listen 80;
        server_name _;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL Configuration (add your certificates)
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # SSL Security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Health check endpoint - INTERNAL ACCESS ONLY
        location /health {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Webhook endpoint - EXTERNAL ACCESS (Twilio only)
        location /webhook {
            # Allow Twilio IPs for webhook delivery
            if ($twilio_access = 0) {
                return 403 "Access denied: Twilio webhook access required";
            }
            
            limit_req zone=webhook burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
        }
        
        # Blog generation endpoint - INTERNAL ACCESS ONLY
        location /generate {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=generate burst=2 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 120s;
        }
        
        # Blog management endpoints - INTERNAL ACCESS ONLY
        location /blog/ {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Provider status endpoint - INTERNAL ACCESS ONLY
        location /providers/ {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Debug endpoint - INTERNAL ACCESS ONLY
        location /debug {
            # Restrict to internal cluster networks only  
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Metrics endpoint - INTERNAL ACCESS ONLY  
        location /metrics {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Default location - INTERNAL ACCESS ONLY
        location / {
            # Restrict to internal cluster networks only
            if ($internal_access = 0) {
                return 403 "Access denied: Internal cluster access required";
            }
            
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
        }
        
        # Block common attack patterns
        location ~* \.(php|asp|aspx|jsp)$ {
            return 403;
        }
        
        location ~* /\.(?!well-known) {
            return 403;
        }
        
        # Security: Block requests with suspicious user agents
        if ($http_user_agent ~* "(?:nmap|nikto|wikto|sf|sqlmap|bsqlbf|w3af|acunetix|havij|appscan)") {
            return 403;
        }
    }
} 